/*
Mixin: mq
Simplifies defining media queries for most cases.  Pass a number to get "@media screen and (min-width: #{number}em)" (by default).  Complex queries must be passed as strings. Allows bypassing media queries when setting $bypassMQ to true and either passing in a number or passing the boolean 'true' as a first parameter.

*/
$mq: () !default;
$mq: map-merge((
	device: 'only screen', //-# default device for `mq` mixin when none are specified.  has 'only' to prevent some older browsers from applying styles, as we will not be testing those browsers.
	feature: 'min-width', //-# default 'feature' for `mq` mixin when none are specified
	bypass: false //-# whether or not to bypass media queries altogether, for targeting desktop browser that do not support them.
), $mq);

@mixin mq($queryOrSkipBypassCheck, $query: false){
	$skipBypassCheck: false;
	@if type-of($queryOrSkipBypassCheck) != 'bool'{
		$query: $queryOrSkipBypassCheck;
	}@else{
		$skipBypassCheck: $queryOrSkipBypassCheck;
	}
	@if map-get($mq, bypass) and ($skipBypassCheck or (type-of($query) == 'number' and str-index(map-get($mq, device), 'screen'))){
		@content;
	}@else{
		//--if passed a number, turn it into a default query
		@if type-of($query) == 'number'{
			$number: 0;
			@if unitless($query){
				$number: #{$query}em; //-# use em units if none are provided
			}@else{
				$number: $query;
			}
			$query: map-get($mq, device) + " and " + "(" + map-get($mq, feature) + ":" + $number + ")";
		}
		@if $query{
			@media #{$query}{ @content; }
		}
	}
}

/*
Mixin: supports
Provide list of named UA support levels.  Will output content wrapped in appropriate `@media` and `@supports` blocks.

If name in `$disabledSupports` list, will not output at all.
*/
$disabledSupports: () !default;
@mixin supports($names...){
	@each $name in $names{
		@if not index($disabledSupports, $name){
			@if $name == 'fixed-nav'{
				@include mq('only screen and (min-width: ' + (map-get($bp, 'verySmall') * 1em) + ') and (min-height:' + (map-get($bpHeight, 'stickyHeader') * 1em) + ')'){
					@content;
				}
			}@elseif $name == 'app-grid'{
				@supports (display: grid){
					@include mq(map-get($bp, 'prettySmall')){
						@content;
					}
				}
			}@elseif $name == 'dark-theme'{
				@media only screen and (prefers-color-scheme: dark){
					@content;
				}
			}@elseif $name == 'stickyGrid'{
				@media #{'only screen and (min-height: ' + (map-get($bpHeight, 'stickyGrid') * 1em) + ')'}{
					@supports (position: sticky){
						@content;
					}
				}
			}@elseif $name == 'sticky-nav'{
				@include mq('only screen and (min-width: ' + (map-get($bp, tiny) * 1em) + ') and (min-height:' + (map-get($bpHeight, "stickyHeader") * 1em) + ')'){
					@supports (position: sticky){
						@content;
					}
				}
			}@elseif $name == 'vertical-text'{
				@include supports('fixed-nav'){
					@supports (text-orientation: upright) and (writing-mode: vertical-rl){
						@content;
					}
				}
			}@elseif $name == 'wide-app-grid'{
				@supports (display: grid){
					@include mq(map-get($bp, wide) + $appNavWidth + 1em){
						@content;
					}
				}
			}@elseif map-has-key($bp, $name) != null{
				@include mq(map-get($bp, $name)){
					@content;
				}
			}@else{
				@warn '#{$name} not a valid `supports()` option';
			}
		}@else{
			//--must have some output or otherwise empty placeholders will throw error
			_supports{ disabled: true; }
		}
	}
}
